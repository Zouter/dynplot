score_order <- function(ordered) {
print(ordered)
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
tibble(ordered=list(ordered), score = score_order(ordered))
}) %>% bind_rows()
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
print(ordered)
tibble(ordered=list(ordered), score = score_order(ordered))
}) %>% bind_rows()
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order(sample(seq_len(n)))
score_order <- function(ordered) {
print(ordered)
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
tibble(ordered=list(ordered), score = score_order(ordered))
}) %>% bind_rows()
score_order <- function(ordered) {
print(ordered)
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
tibble(score = score_order(ordered), ordered=list(ordered))
}) %>% bind_rows()
milestone_network <- task2$milestone_network
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
tibble(score = score_order(ordered), ordered=list(ordered))
}) %>% bind_rows()
gaControl("permutation")
ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
n <- nrow(milestone_network)
scores <- map(seq_len(1000), function(i) {
ordered <- sample(seq_len(n))
tibble(score = score_order(ordered), ordered=list(ordered))
}) %>% bind_rows()
scores %>% arrange(-score)
library(GA)
ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
result <- ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
result@bestSol
plot(result)
summary(result)
result@solution
result@solution[1, ]
optimize_order <- function(milestone_network) {
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
library(GA)
result <- ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order(task2$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task2$milestone_network)
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
print(n)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
print(n)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
print(n)
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
print("WAT")
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
print("WAT")
#result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
print(n)
#result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
}
optimize_order(task1$milestone_network)
task1$milestone_network
optimize_order <- function(milestone_network) {
n <- nrow(milestone_network)
if (n > 1) {
score_order <- function(ordered) {
from <- milestone_network$from[ordered]
to <- milestone_network$to[ordered]
-sum(
abs(match(from, to) - seq_len(n)) %>% sum(na.rm=TRUE),
abs(match(to, from) - seq_len(n)) %>% sum(na.rm=TRUE)
)
}
print(n)
#result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n))
ordered <- result@solution[1, ]
milestone_network[ordered, ]
} else {
milestone_network
}
}
optimize_order(task1$milestone_network)
library(dynplot)
plot_strip(task1, task2)
library(dynplot)
library(dynplot)
plot_strip(task1, task2)
library(dynplot)
rm(optimize_order)
rm(score_order)
rm(score)
plot_strip(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
library(dynplot)
plot_strip_connections(task1, task2)
plot_strip(task1, task2)
library(dynplot)
plot_strip(task1, task2)
plot_strip_connections(task1, task2)
library(dynplot)
library(dynplot)
plot_strip_connections(task1, task2)
toy_id <- which(toys$perturbator_id == "break_cycle")[[1]]
toys$perturbator_id
toy_id <- which(toys$perturbator_id == "break_cycles")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
toy_id <- which(toys$generator_id == "bifurcating")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
result <- GA::ga(type="permutation", score_order, min=rep(1, n), max=rep(n, n), maxiter=1000, popSize=20, maxFitness = 0, parallel=TRUE)
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
toy_id <- which(toys$generator_id == "cycle")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
library(dynplot)
toy_id <- which(toys$generator_id == "hairy")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
toy_id <- which(toys$perturbator_id == "hairy")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
library(dynplot)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
library(dynplot)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
plot_strip_connections(task1, task2)
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
toy_id <- which(toys$perturbator_id == "break_cycles")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2)
toy_id <- which(toys$perturbator_id == "hairy_small")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2)
plot_strip_connections(task1, task2)
plot_strip_connections(task1, task2, reorder = FALSE)
plot_strip_connections(task1, task2, reorder = FALSE)
plot_strip_connections(task1, task2, reorder = TRUE)
task2$milestone_network <- task2$milestone_network[sample(nrow(task2$milestone_network)),]
plot_strip_connections(task1, task2, reorder = TRUE)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
task2 <- toys$toy[[toy_id]]
toy_id <- which(toys$perturbator_id == "hairy_small")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
task2$milestone_network <- task2$milestone_network[c(1, sample(nrow(task2$milestone_network)-1)+1),]
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
task2$milestone_network <- task2$milestone_network[c(1, sample(nrow(task2$milestone_network)-1)+1),]
toy_id <- which(toys$perturbator_id == "hairy")[[1]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
plot_strip(task1, task2)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
task2$milestone_network
plot_connections(task1$milestone_network)
plot_strip(task1, task2)
plot_strip_connections(task1, task2, reorder = FALSE)
plot_strip(task1, task2, reorder = FALSE)
if (reorder) {
task1$milestone_network <- optimize_order(task1$milestone_network)
task2$milestone_network <- optimize_order(task2$milestone_network)
}
milestone_network1 <- task1$milestone_network %>%
mutate(
cumstart = c(0, cumsum(length)[-length(length)]) + margin * (seq_len(n())-1),
cumend = c(cumsum(length)) + margin * (seq_len(n())-1)
)
task1$milestone_network
milestone_network1 <- task1$milestone_network %>%
mutate(
cumstart = c(0, cumsum(length)[-length(length)]) + margin * (seq_len(n())-1),
cumend = c(cumsum(length)) + margin * (seq_len(n())-1)
)
margin = 0.2
milestone_network1 <- task1$milestone_network %>%
mutate(
cumstart = c(0, cumsum(length)[-length(length)]) + margin * (seq_len(n())-1),
cumend = c(cumsum(length)) + margin * (seq_len(n())-1)
)
margin = 0.1
library(dynplot)
milestone_network1 <- task1$milestone_network %>%
mutate(
cumstart = c(0, cumsum(length)[-length(length)]) + margin * (seq_len(n())-1),
cumend = c(cumsum(length)) + margin * (seq_len(n())-1)
)
milestone_network1
milestone_network2 <- task2$milestone_network %>%
mutate(
cumstart = c(0, cumsum(length)[-length(length)]) + margin * (seq_len(n())-1),
cumend = c(cumsum(length)) + margin * (seq_len(n())-1)
)
milestone_network2
prog1 <- task1$progression %>% left_join(milestone_network1, by=c("from", "to")) %>% mutate(cumpercentage=percentage*length + cumstart) %>% rename_at(vars(-cell_id), ~paste0(., 1))
prog2 <- task2$progression %>% left_join(milestone_network2, by=c("from", "to")) %>% mutate(cumpercentage=percentage*length + cumstart) %>% rename_at(vars(-cell_id), ~paste0(., 2))
prog <- full_join(prog1, prog2, by=c("cell_id"))
ymax <- max(milestone_network2$cumend)
xmax <- max(milestone_network1$cumend)
ggplot(prog) +
geom_rect(aes(xmin=cumstart, xmax=cumend, ymin=0, ymax=ymax), data=milestone_network1, alpha=0.1) +
geom_rect(aes(ymin=cumstart, ymax=cumend, xmin=0, xmax=ymax), data=milestone_network2, alpha=0.1) +
geom_point(aes(cumpercentage1, cumpercentage2)) +
geom_vline(aes(xintercept=cumstart), data=milestone_network1, alpha=0.5) +
geom_vline(aes(xintercept=cumend), data=milestone_network1, linetype="dashed", alpha=0.5) +
geom_hline(aes(yintercept=cumstart), data=milestone_network2, alpha=0.5) +
geom_hline(aes(yintercept=cumend), data=milestone_network2, linetype="dashed", alpha=0.5) +
ggtitle(paste0(task1$id, " -> ", task2$id)) +
theme_clean()
milestone_network2
milestone_network1
xmax
prog
milestone_network1
ggplot(prog) +
geom_rect(aes(xmin=cumstart, xmax=cumend, ymin=0, ymax=ymax), data=milestone_network1, alpha=0.1) +
geom_rect(aes(ymin=cumstart, ymax=cumend, xmin=0, xmax=xmax), data=milestone_network2, alpha=0.1) +
geom_point(aes(cumpercentage1, cumpercentage2)) +
geom_vline(aes(xintercept=cumstart), data=milestone_network1, alpha=0.5) +
geom_vline(aes(xintercept=cumend), data=milestone_network1, linetype="dashed", alpha=0.5) +
geom_hline(aes(yintercept=cumstart), data=milestone_network2, alpha=0.5) +
geom_hline(aes(yintercept=cumend), data=milestone_network2, linetype="dashed", alpha=0.5) +
ggtitle(paste0(task1$id, " -> ", task2$id)) +
theme_clean()
library(dynplot)
plot_strip_connections(task1, task2, reorder = FALSE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy")[[10]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
plot_strip_connections(task1, task2, reorder = TRUE)
library(dynplot)
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy_small")[[10]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy_small")[[2]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy")[[2]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
pow(2, 2)
exp(2, 2)
pow2
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
plot_strip_connections(task1, task2, reorder = TRUE)
toy_id <- which(toys$perturbator_id == "hairy_small")[[10]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
toy_id <- which(toys$perturbator_id == "hairy_small")[[6]]
toy_id <- which(toys$perturbator_id == "hairy_small")[[4]]
toy_id <- which(toys$perturbator_id == "hairy_large")[[4]]
task1 <- toys$gs[[toy_id]]
task2 <- toys$toy[[toy_id]]
plot_strip_connections(task1, task2, reorder = TRUE)
